{% extends "default.twig" %}

{% block content %}
    <div class="home">

        <section class="jumbotron">
            <div class="container">
                <h1>
                    PHP-DI <strong>5</strong>
                </h1>
                <p>
                    The dependency injection container for humans
                </p>
                <p>
                    <a href="{{ baseUrl }}/doc/getting-started.html" class="btn btn-lg btn-primary">
                        Get started
                    </a>
                    <a href="{{ baseUrl }}/doc/" class="btn btn-lg btn-default">
                        Documentation
                    </a>
                </p>
            </div>
        </section>

        <section class="odd">
            <div class="container">

                <h2>Framework integrations</h2>

                <div class="row">
                    <div class="col-md-4">
                        <img class="framework-logo" src="{{ baseUrl }}/img/zf-logo.png" alt="Zend Framework 1 & 2">
                        <h5>Zend Framework 1 & 2</h5>

                        <p>
                            Integrates in Zend Framework 1 & 2.
                        </p>
                    </div>
                    <div class="col-md-4">
                        <i class="fa fa-globe"></i>
                        <h5>Open</h5>

                        <p>
                            Integrates easily to your project or any framework.
                        </p>
                        <p>
                            Designed to work along with other containers.
                        </p>
                    </div>
                    <div class="col-md-4">
                        <img class="framework-logo" src="{{ baseUrl }}/img/symfony-logo.png" alt="Symfony 2">
                        <h5>Symfony 2</h5>

                        <p>
                            Integrates in Symfony 2 and works along with Symfony's default container.
                        </p>
                    </div>
                </div>

            </div>
        </section>

        <section>
            <div class='container'>

                <h2>Autowiring</h2>

                <div class="row">
                    <div class='col-md-6'>
                        <p>
                            Type-hint your constructor parameters and the container can guess which dependencies to inject.
                        </p>
<pre><code class="php">class Foo
{
    private $bar;

    public function __construct(Bar $bar)
    {
        return $this->bar = $bar;
    }
}</code></pre>
                        <p>
                            Covers 80% of the use cases for 0 configuration.
                        </p>
                    </div>
                    <div class='col-md-6'>
                        <p>
                            Mark a property to be injected using a annotations. Particularly useful in controllers, CLI command, system testsâ€¦
                        </p>
<pre><code class="php">class Foo
{
    /**
    * @Inject
    * @var Bar
    */
    private $bar;

}</code></pre>
                        <p>
                            Autowiring and annotations are optional and can be disabled.
                        </p>
                    </div>
                </div>
            </div>
        </section>

        <section class="odd">
            <div class='container'>

                <h2>Expressive configuration</h2>

                <p>
                    PHP-DI's configuration is written in PHP, allowing to benefit from auto-completion, static analysis and refactoring support with any IDE.
                </p>

                <div class='row'>
                    <div class='col-md-6'>
                        <h4>Object creation</h4>
<pre><code class="php">return [
    Foo::class => object()
        ->constructor(
            get(Bar::class)
        )
];</code></pre>
                    </div>
                    <div class='col-md-6'>
                        <h4>Inline factories</h4>
<pre><code class="php">return [
    Foo::class => function ($container) {
        $dependency = $container->get(Bar::class);
        return Foo::create($dependency);
    }
];</code></pre>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h4>Interface-to-implementation binding</h4>
<pre><code class="php">return [
    NotifierInterface::class => get(EmailNotifier::class)
];</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h4>Environment variables</h4>
<pre><code class="php">return [
    'db.host' => env('DB_HOST')
];</code></pre>
                    </div>
                </div>

                <p>
                    The configuration format <a href="{{ baseUrl }}/news/06-php-di-4-0-new-definitions.html">has been imagined</a> as a successor of XML and YAML, taking advantages of all the latest features of PHP:
                </p>

                <div class="row">
                    <div class='col-md-4'>
                        <h4>PHP 5.4 short arrays</h4>
<pre><code class="php">return [


];</code></pre>
                    </div>
                    <div class='col-md-4'>
                        <h4>PHP 5.5 <code>::class</code> magic constant</h4>
<pre><code class="php">return [
    Foo::class => DI\object()
      ->constructor(DI\get(Bar::class))
];</code></pre>
                    </div>
                    <div class='col-md-4'>
                        <h4>PHP 5.6 <code>use function</code></h4>
<pre><code class="php">return [
    Foo::class => object()
      ->constructor(get(Bar::class))
];</code></pre>
                    </div>
                </div>

            </div>
        </section>

    </div>


<section class='section-wrapper'>
    <div class='container'>
        <div class='row'>
            <div class='col-md-12'>
                <h2>Powerful</h2>

                <p>
                    Behind the simplicity, PHP-DI is meant to be extremely powerful.
                </p>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>Basic features</h5>
                    <ul>
                        <li>Constructor, method and property injection</li>
                        <li>Injection of objects <em>and</em> scalar values</li>
                        <li>Map interfaces to implementations</li>
                        <li>Recursive dependency injection</li>
                    </ul>
                </div>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>The power behind definitions</h5>
                    <ul>
                        <li>Definitions using the fluent API</li>
                        <li>Definitions using closures</li>
                        <li>Lazy injection</li>
                        <li>Clear definition overriding</li>
                    </ul>
                </div>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>Not just a container</h5>
                    <ul>
                        <li>Injection on an existing instance</li>
                        <li>Can behave like a factory</li>
                        <li>Integrates with other containers</li>
                        <li>Offers extension points</li>
                    </ul>
                </div>
            </div>
        </div>
        <p>
            Go and have a look in <a href="{{ baseUrl }}/doc/">the complete documentation</a>.
        </p>
    </div>
</section>


<section class='section-wrapper'>
    <div class='container'>
        <div class='row'>
            <div class='col-md-12'>
                <h2>Friendly to framework developers</h2>

                <p>
                    PHP-DI not only provides the classic API of a container, but also advanced
                    features that makes it really practical when building or extending a framework.
                </p>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>Get & Has</h5>
                    <p>
                        PHP-DI implements
                        <a href="https://github.com/container-interop/container-interop/blob/master/src/Interop/Container/ContainerInterface.php">
                            <code>ContainerInterface</code></a> from
                        <a href="https://github.com/container-interop/container-interop">Container-Interop 1.0</a>.
                        That means that you can use it in any Container-Interop compatible library
                        or framework.
                    </p>
                    <p>
                        That universal interface standardizes the <code>get</code> and <code>has</code> methods:
                    </p>
                    <pre><code class="php small">$container->get($name);
$container->has($name);</code></pre>
                </div>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>Make</h5>
                    <p>
                        Sometimes, you want to create an object with specific parameters <em>and</em>
                        parameters coming from the container.
                    </p>
                    <p>
                        To do just this, PHP-DI offers the <code>make</code> method:
                    </p>
                    <pre><code class="php small">$container->make($name, $parameters);</code></pre>
                    <p>
                        Any constructor parameter that is not in the <code>$parameters</code> array will be
                        resolved from the container.
                    </p>
                    <p>
                        For this, the container implements a separate <code>DI\FactoryInterface</code> that
                        makes it easy to inject and use without tying your code to the container itself.
                    </p>
                </div>
            </div>
            <div class='col-md-4'>
                <div class='white-card'>
                    <h5>Inject on a instance</h5>
                    <p>
                        This is a very special feature but sometimes you have no choice: you have an
                        object that is already created and you want to have all its dependencies injected.
                        Of course, this excludes constructor injection, but the object might be a
                        candidate for injection through setters or properties.
                    </p>
                    <p>
                        PHP-DI's container provide a <code>injectOn</code> method to do that:
                    </p>
                    <pre><code class="php small">$container->injectOn($instance);</code></pre>
                </div>
            </div>
            <div class='col-md-12'>
                <p>
                    You can read more details on these features
                    <a href="{{ baseUrl }}/doc/container.html">in the "Container API" documentation</a>.
                </p>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block footer %}
    <footer>
        <div class="container">
            <div class='row'>
                <div class='col-md-6'>
                    <h5 class='footer-header'>Developed with care</h5>
                    <div class="row-fluid">
                        <ul class="list-unstyled col-md-6">
                            <li>
                                PSR-0, PSR-1 and PSR-2 compliant
                            </li>
                            <li>
                                Compliant with <a href="https://github.com/container-interop/container-interop">Container Interop</a>
                            </li>
                            <li>
                                Follows <a href="http://semver.org/">Semantic Versioning</a>
                            </li>
                        </ul>
                        <ul class="list-unstyled col-md-6">
                            <li>
                                <a href='https://travis-ci.org/mnapoli/PHP-DI'>
                                    <img src="https://img.shields.io/travis/mnapoli/PHP-DI.svg?style=flat-square"></a>
                            </li>
                            <li>
                                <a href='https://scrutinizer-ci.com/g/mnapoli/PHP-DI/'>
                                    <img src="https://img.shields.io/scrutinizer/g/mnapoli/PHP-DI.svg?style=flat-square"></a>
                            </li>
                            <li>
                                <a href='https://coveralls.io/r/mnapoli/PHP-DI?branch=master'>
                                    <img src="https://img.shields.io/coveralls/mnapoli/PHP-DI/master.svg?style=flat-square" alt='Coverage Status'></a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class='col-md-6'>
                    <h5>Contributors</h5>
                    <ul class='list-unstyled'>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                        <li class='col-md-1'>
                            <a class='thumbnail'>
                                <img src="images/test-user.png"/>
                            </a>
                        </li>
                    </ul>
                    <p class="text-right">
                        <a href="https://github.com/mnapoli/PHP-DI/graphs/contributors">All contributors Â»</a>
                    </p>
                </div>
            </div>
            <div class='copyright'>
                Copyright &copy; 2014 <a href="http://mnapoli.fr">Matthieu Napoli</a>
                Website generated with
                <a href="http://mnapoli.fr/Couscous/" target="_blank">Couscous</a>.
            </div>
        </div>
    </footer>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        $(function() {
            var url = "https://api.github.com/repos/mnapoli/php-di/contributors?callback=?";

            $.getJSON(url, function (result) {
                var elem = $('.contributors');
                elem.empty();
                for (var i = 0; i < Math.min(result.data.length, 6); ++i) {
                    var img = result.data[i].avatar_url;
                    var name = result.data[i].login;
                    var url = result.data[i].html_url;
                    elem.append($("<li class='col-md-1'><a class='thumbnail' title='" + name + "' href='" + url + "'><img src='" + img + "'/></a></li>"));
                }
            });
        });
    </script>

{% endblock %}
